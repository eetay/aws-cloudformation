AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  BastionKeyPair:
    Type: String
  BastionAccessIpRange:
    Type: String
    Description: 'Cidr of internet IPs which can ssh into Bastion; default: whole world'
    Default: 0.0.0.0/0
  Project: 
    Type: String
    Description: 'Billing designator'
    Default: 'not-set'

Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are four subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.0.255
  # 10.0.1.0 - 10.0.1.255
  # 10.0.2.0 - 10.0.2.255
  # 10.0.3.0 - 10.0.3.255
  #
  # If you need more IP addresses (perhaps you have so many
  # instances that you run out) then you can customize these
  # ranges to add more
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
    PrivateOne:
      CIDR: '10.0.2.0/24'
    PrivateTwo:
      CIDR: '10.0.3.0/24'
Resources:
  # VPC has two public subnets, and two private subnets.
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      # Name: !Sub '{AWS::StackName}'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
      - Key: "Name"
        Value: !Sub 'VPC of ${AWS::StackName}'
      - Key: "Project"
        Value: !Ref Project

  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
      - Key: "Name"
        Value: !Sub '${AWS::StackName}-Public1'
      - Key: "Project"
        Value: !Ref Project

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
      - Key: "Name"
        Value: !Sub '${AWS::StackName}-Public2'
      - Key: "Project"
        Value: !Ref Project

  BastionSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "BastionSG"
      GroupDescription: !Sub '${AWS::StackName} Bastion Security Group'
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref BastionAccessIpRange
      Tags:
      - Key: "Name"
        Value: !Sub 'Bastion SG of ${AWS::StackName}'
      - Key: "Project"
        Value: !Ref Project

  Bastion:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-0d8f6eb4f641ef691" # AWS linux 2
      KeyName: !Ref BastionKeyPair
      InstanceType: "t2.micro"
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: "0"
        GroupSet:
        - !GetAtt VPC.DefaultSecurityGroup
        - !Ref BastionSG
        SubnetId: !Ref "PublicSubnetOne"
      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - "#!/bin/bash -x"
            - !Sub 'sudo hostnamectl set-hostname "${AWS::StackName}-bastion"'
      Tags:
      - Key: "Name"
        Value: !Sub 'Bastion of ${AWS::StackName}'
      - Key: "Project"
        Value: !Ref Project

  # Two private subnets where instances will only have private
  # IP addresses, and will only be reachable by other members of the
  # VPC
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
      Tags:
      - Key: "Name"
        Value: !Sub '${AWS::StackName}-Private1'
      - Key: "Project"
        Value: !Ref Project

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
      Tags:
      - Key: "Name"
        Value: !Sub '${AWS::StackName}-Private2'
      - Key: "Project"
        Value: !Ref Project

  # Setup networking resources for the public subnets. Instances
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: "Name"
        Value: !Sub '${AWS::StackName}-IGW'
      - Key: "Project"
        Value: !Ref Project
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: "Name"
        Value: !Sub '${AWS::StackName}-PublicRouteTable'
      - Key: "Project"
        Value: !Ref Project
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Setup networking resources for the private subnets. Containers
  # in these subnets have only private IP addresses, and must use a NAT
  # gateway to talk to the internet. We launch two NAT gateways, one for
  # each private subnet.
  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
      Tags:
      - Key: "Name"
        Value: !Sub '${AWS::StackName}-NatGatewayOne'
      - Key: "Project"
        Value: !Ref Project
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo
      Tags:
      - Key: "Name"
        Value: !Sub '${AWS::StackName}-NatGatewayTwo'
      - Key: "Project"
        Value: !Ref Project
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: "Name"
        Value: !Sub '${AWS::StackName}-PrivateRouteTableOne'
      - Key: "Project"
        Value: !Ref Project
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: "Name"
        Value: !Sub '${AWS::StackName}-PrivateRouteTableTwo'
      - Key: "Project"
        Value: !Ref Project
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo


#
# Outputs to be used by other CloudFormation templates if needed.
#
Outputs:
  VPC:
    Description: 'The main VPC of this stack'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  BastionDnsName:
    #Description: !Sub 'The domain name of bastion host for the VPC of stack ${AWS::StackName}'
    Value: !GetAtt Bastion.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-BastionDnsName'
  VpcCidrBlock:
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub 'VpcCidrBlock'
  VpcId:
    Value: !Ref VPC
    Export:
      Name: !Sub 'VpcId'
  PrivateSubnets:
    Value:
      Fn::Join:
      - ","
      - - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
  PublicSubnets:
    Value:
      Fn::Join:
      - ","
      - - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
    Export:
      Name: !Sub 'PublicSubnets'

